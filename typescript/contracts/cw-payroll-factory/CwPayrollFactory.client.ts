/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, UncheckedDenom, Curve, UncheckedVestingParams, SaturatingLinear, PiecewiseLinear, QueryMsg, MigrateMsg, Addr, ArrayOfAddr } from "./CwPayrollFactory.types";
export interface CwPayrollFactoryReadOnlyInterface {
  contractAddress: string;
  listVestingContracts: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfAddr>;
  listVestingContractsByInstantiator: ({
    instantiator,
    limit,
    startAfter
  }: {
    instantiator: string;
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfAddr>;
  listVestingContractsByRecipient: ({
    limit,
    recipient,
    startAfter
  }: {
    limit?: number;
    recipient: string;
    startAfter?: string;
  }) => Promise<ArrayOfAddr>;
}
export class CwPayrollFactoryQueryClient implements CwPayrollFactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.listVestingContracts = this.listVestingContracts.bind(this);
    this.listVestingContractsByInstantiator = this.listVestingContractsByInstantiator.bind(this);
    this.listVestingContractsByRecipient = this.listVestingContractsByRecipient.bind(this);
  }

  listVestingContracts = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_vesting_contracts: {
        limit,
        start_after: startAfter
      }
    });
  };
  listVestingContractsByInstantiator = async ({
    instantiator,
    limit,
    startAfter
  }: {
    instantiator: string;
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_vesting_contracts_by_instantiator: {
        instantiator,
        limit,
        start_after: startAfter
      }
    });
  };
  listVestingContractsByRecipient = async ({
    limit,
    recipient,
    startAfter
  }: {
    limit?: number;
    recipient: string;
    startAfter?: string;
  }): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_vesting_contracts_by_recipient: {
        limit,
        recipient,
        start_after: startAfter
      }
    });
  };
}
export interface CwPayrollFactoryInterface extends CwPayrollFactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  instantiatePayrollContract: ({
    codeId,
    instantiateMsg,
    label
  }: {
    codeId: number;
    instantiateMsg: InstantiateMsg;
    label: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CwPayrollFactoryClient extends CwPayrollFactoryQueryClient implements CwPayrollFactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.instantiatePayrollContract = this.instantiatePayrollContract.bind(this);
  }

  instantiatePayrollContract = async ({
    codeId,
    instantiateMsg,
    label
  }: {
    codeId: number;
    instantiateMsg: InstantiateMsg;
    label: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      instantiate_payroll_contract: {
        code_id: codeId,
        instantiate_msg: instantiateMsg,
        label
      }
    }, fee, memo, funds);
  };
}